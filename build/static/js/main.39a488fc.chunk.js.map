{"version":3,"sources":["../../savvyuni-sde-coding-exercise/src/logo.svg","../../savvyuni-sde-coding-exercise/src/components/EditorPreview.js","../../savvyuni-sde-coding-exercise/src/App.js","../../savvyuni-sde-coding-exercise/src/serviceWorker.js","../../savvyuni-sde-coding-exercise/src/index.js"],"names":["module","exports","__webpack_require__","p","EditorPreview","react_default","a","createElement","className","dangerouslySetInnerHTML","__html","this","props","data","Component","defaultProps","CKEDITOR_CONFIG","resize_enabled","height","window","innerHeight","toolbar","name","items","extraPlugins","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","mainEditor","topPanelHeight","document","getElementById","offsetHeight","bottomPanelHeight","editor","resize","err","console","log","_this2","addEventListener","resizeEditor","evt","setState","getData","_this3","ckeditor_default","onChange","onEditorChange","config","ref","instance","components_EditorPreview","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2MCGlCC,mLAEE,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUC,wBAA0B,CAAEC,OAAQC,KAAKC,MAAMC,gBAJ5DC,aAU5BV,EAAcW,aAAe,CACzBF,KAAM,IAOKT,QCXTY,EAAsB,CACxBC,gBAAgB,EAChBC,OAAQC,OAAOC,YALiB,GACI,GAIkD,KACtFC,QAAS,CACL,CAACC,KAAM,cAAeC,MAAO,CAAC,OAAQ,SAAU,YAAa,WAC7D,CAACD,KAAM,YAAaC,MAAO,CAAC,eAAgB,iBAC5C,CAACD,KAAM,SAAUC,MAAO,CAAC,QAAS,cAClC,CAACD,KAAM,SAAUC,MAAO,CAAC,OAAQ,aACjC,CAACD,KAAM,SAAUC,MAAO,CAAC,YAAa,aAE1CC,aAAc,CAAC,cAgEJC,cA3DX,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAhB,KAAAc,IAEfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAhB,KAAAgB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAApB,KAAMC,KAEDoB,MAAQ,CACTnB,KAAM,IAGVa,EAAKO,WAAa,KARHP,8EAef,IACI,IAAIQ,EAAiBC,SAASC,eAAe,aAAaC,aACtDC,EAAoBH,SAASC,eAAe,gBAAgBC,aAChE1B,KAAKsB,WAAWM,OAAOC,OAAO,OAAQrB,OAAOC,YAAcc,EAAiBI,GAAmB,GACjG,MAAOG,GACLC,QAAQC,IAAIF,gDAIA,IAAAG,EAAAjC,KAChBQ,OAAO0B,iBAAiB,SAAU,WAC9BD,EAAKE,wDAQEC,GACXpC,KAAKqC,SAAS,CACVnC,KAAMkC,EAAIR,OAAOU,6CAIhB,IAAAC,EAAAvC,KACL,OACIN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAC4C,EAAA7C,EAAD,CACIO,KAAMF,KAAKqB,MAAMnB,KACjBuC,SAAU,SAACL,GAAD,OAASG,EAAKG,eAAeN,IACvCO,OAAQtC,EACRuC,IAAK,SAACC,GAAD,OAAcN,EAAKjB,WAAauB,MAG7CnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAACkD,EAAD,CAAe5C,KAAMF,KAAKqB,MAAMnB,gBAtDlCC,aCXE4C,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAAS7B,SAASC,eAAe,SD2H3C,kBAAmB6B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.39a488fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass EditorPreview extends Component {\n    render() {\n        return (\n            <div className=\"editor-preview\">\n                <div className=\"content\" dangerouslySetInnerHTML={ { __html: this.props.data } }></div>\n            </div>\n        );\n    }\n}\n\nEditorPreview.defaultProps = {\n    data: ''\n};\n\nEditorPreview.propTypes = {\n    data: PropTypes.string\n};\n\nexport default EditorPreview;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport CKEditor from 'ckeditor4-react';\nimport EditorPreview from './components/EditorPreview'\n\nconst DEFAULT_TOP_PANEL_HEIGHT  =   42;\nconst DEFAULT_BOTTOM_PANEL_HEIGHT   =   27;\n\nconst CKEDITOR_CONFIG   =   {\n    resize_enabled: false,\n    height: window.innerHeight - DEFAULT_TOP_PANEL_HEIGHT - DEFAULT_BOTTOM_PANEL_HEIGHT + \"px\",\n    toolbar: [\n        {name: 'basicstyles', items: ['Bold', 'Italic', 'Underline', 'Strike']},\n        {name: 'paragraph', items: ['NumberedList', 'BulletedList']},\n        {name: 'insert', items: ['Image', 'EqnEditor']},\n        {name: 'styles', items: ['Font', 'FontSize']},\n        {name: 'colors', items: ['TextColor', 'BGColor']}\n    ],\n    extraPlugins: ['eqneditor']\n};\n\nclass App extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n            data: \"\"\n        };\n\n        this.mainEditor = null;\n    }\n\n    /**\n     * Resize the editor dimension when the window is resized\n     */\n    resizeEditor() {\n        try {\n            let topPanelHeight = document.getElementById(\"cke_1_top\").offsetHeight;\n            let bottomPanelHeight = document.getElementById(\"cke_1_bottom\").offsetHeight;\n            this.mainEditor.editor.resize(\"100%\", window.innerHeight - topPanelHeight - bottomPanelHeight, true);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", () => {\n            this.resizeEditor();\n        });\n    }\n\n    /**\n     * Handle CKEditor content changes\n     * @param evt\n     */\n    onEditorChange(evt) {\n        this.setState({\n            data: evt.editor.getData()\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"container editor\">\n                    <CKEditor\n                        data={this.state.data}\n                        onChange={(evt) => this.onEditorChange(evt)}\n                        config={CKEDITOR_CONFIG}\n                        ref={(instance) => this.mainEditor = instance}\n                    />\n                </div>\n                <div className=\"container preview\">\n                    <EditorPreview data={this.state.data}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}